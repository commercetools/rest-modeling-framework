@Ecore(nsPrefix="resources",nsURI="http://www.vrap.io/raml/resources")
@GenModel(modelDirectory="/raml-model/src/main/java-gen",
    complianceLevel="8.0")
package io.vrap.rmf.raml.model.resources

import io.vrap.rmf.raml.model.types.Instance
import io.vrap.rmf.raml.model.types.ProtocolsFacet

import io.vrap.rmf.raml.model.types.DocumentableElement

import io.vrap.rmf.raml.model.types.AnnotationsFacet
import io.vrap.rmf.raml.model.types.HeadersFacet
import io.vrap.rmf.raml.model.types.QueryParametersFacet
import io.vrap.rmf.raml.model.types.TypedElement

import io.vrap.rmf.raml.model.security.SecuredByFacet
import io.vrap.rmf.raml.model.elements.NamedElement

import io.vrap.rmf.raml.model.responses.BodyContainer
import io.vrap.rmf.raml.model.responses.ResponsesFacet
import io.vrap.rmf.raml.model.util.ModelHelper

import com.damnhandy.uri.template.UriTemplate

type UriTemplate wraps UriTemplate
create {
	UriTemplate.fromTemplate(it)
}

class AnnotatedUriTemplate extends AnnotationsFacet {
    UriTemplate value

    op String getTemplate() {
        return value.getTemplate();
    }

    op String expand() {
        return value.expand();
    }
}

class UriParameter extends TypedElement {
}

interface ResourceContainer {
	/*
	 * The (sub-) resources that this element contains. 
	 */
	contains Resource[] resources
	
		
	/*
	 * @return all contained resources
	 */
	refers derived Resource[] allContainedResources get {
		ModelHelper.allContainedResources(this).toEList
	}
}

/*
 * The commonalities between {@link Resource} and {@link ResourceType}
 */
interface ResourceBase extends DocumentableElement, AnnotationsFacet, SecuredByFacet, ApplyTraitsFacet {
	/*
	 * The uri parameters of this resource.
	 */
	contains UriParameter[] uriParameters
	
	/*
	 * The methods that this resource provides.
	 */
	contains Method[] methods
	
	/*
	 * Returns the method with the given http method or null if
	 * no method with the given http method exists.
	 */
	op Method getMethod(HttpMethod httpMethod) {
		methods.findFirst[it.method == httpMethod]
	}	
		
	/*
	 * The resource type that this resource inherits.
	 */
	contains ResourceTypeApplication ^type
}

class Resource extends ResourceBase, ResourceContainer, ApplyTraitsFacet {
	/*
	 * The relative uri of this resource.
	 */
	UriTemplate relativeUri
	
	/*
	 * The full uri does not contain the base uri.
	 */
	derived UriTemplate fullUri get {
		ModelHelper.fullUri(this)
	}
	
	/*
	 * The full resource URI relative to the baseUri if there is one.
	 */
	derived String resourcePath get {
		ModelHelper.resourcePath(this)	
	}

	/*
	 * The rightmost of the non-URI-parameter-containing path fragments.
	 */
	derived String resourcePathName get {
		ModelHelper.resourcePathName(this)	
	}

	/*
	 * Returns the uri parameter with the given name or null.
	 * Traverses the resource hierarchy.
	 */
	op UriParameter getUriParameter(String name) {
		val uriParameter = uriParameters.findFirst[it.name == name]
		if (uriParameter === null && parent !== null) {
			parent.getUriParameter(name)
		} else {
			uriParameter
		}	
	}
	
	/*
	 * @return the parent resource or null
	 */
	refers derived Resource parent get {
		if (eContainer instanceof Resource) eContainer as Resource else null
	}
	
	refers derived UriParameter[] fullUriParameters get {
		ModelHelper.fullUriParameters(this).toEList
	}

	refers derived UriParameter[] relativeUriParameters get {
		ModelHelper.relativeUriParameters(this).toEList
	}
}

class ResourceType extends ResourceBase, NamedElement {
	String usage
}

enum HttpMethod {
	^get 
	patch
	put
	post
	delete
	head
	options 
}

interface ApplyTraitsFacet {
	/*
	 * A list of the traits to apply to this element.
	 */
	contains TraitApplication[] is	
}

/*
 * The commonalities between {@link Method} and {@link Trait}
 */
interface MethodBase extends DocumentableElement, AnnotationsFacet, ProtocolsFacet, SecuredByFacet, 
					 HeadersFacet, QueryParametersFacet, ResponsesFacet, ApplyTraitsFacet, BodyContainer {
}
 
class Method extends MethodBase {
	/*
	 * The HTTP method.
	 */
	HttpMethod method
	
	/*
	 * Methods defined in a resource are always required,
	 * but methods defined in a resource type can be optional. 
	 */
	boolean required = "true"
	
	/*
	 * The name of the method.
	 */
	derived String methodName get {
		if (method !== null) method.getName() else ""
	} 
}

class Trait extends NamedElement, MethodBase {
	String usage
}

class ParameterizedApplication {
    contains Parameter[] parameters
}

class ResourceTypeApplication extends ParameterizedApplication {
	refers ResourceType ^type
}

class TraitApplication extends ParameterizedApplication {
	refers Trait trait
}

class Parameter {
	String name
	contains Instance value
}
