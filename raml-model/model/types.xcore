@Ecore(nsPrefix="types",nsURI="http://www.vrap.io/raml/types")
@GenModel(modelDirectory="/raml-model/src/main/java-gen",
    complianceLevel="8.0")
package io.vrap.rmf.raml.model.types

import io.vrap.rmf.raml.model.elements.NamedElement
import io.vrap.rmf.raml.model.util.ModelHelper
import io.vrap.rmf.raml.model.values.UnsignedInteger
import io.vrap.rmf.raml.model.values.RegExp
import io.vrap.rmf.raml.model.values.PositiveInteger
import io.vrap.rmf.raml.model.values.MediaTypes

interface AnyTypeFacet extends AnnotationsFacet, DocumentableElement, NamedElement, InlineTypeContainer {
	op AnyType getType()

	/*
     * An enumeration of all the possible values of instances of this type.
     * The value is an array containing representations of these possible values.
     * An instance of this type MUST be equal to one of these values.
     */
    contains Instance[] ^enum
	
	/*
	 * A default value for this element.
	 */
	contains Instance ^default	
}

interface ObjectTypeFacet extends AnyTypeFacet {
	/*
	 * The minimum number of properties allowed for instances of this type.
	 */
	UnsignedInteger minProperties

	/*
	 * The maximum number of properties allowed for instances of this type.
	 */
	UnsignedInteger maxProperties

	/*
	 * Boolean that indicates if an object instance has additional properties.
	 */
	Boolean additionalProperties
	
	/**
	 * Retrieves the explicitly or inherited set additional properties facet. 
	 */
	op Boolean additionalPropertiesInherited() {
		additionalProperties
	}

	/*
	 * Determines the concrete type of an individual object at runtime when, for example,
	 * payloads contain ambiguous types due to unions or inheritance.
	 *
	 * The value must match the name of one of the declared properties of a type.
	 * Unsupported practices are inline type declarations and using discriminator with non-scalar
	 * properties.
	 */
	String discriminator
	
	/*
	 * Identifies the declaring type. Requires including a discriminator facet in the type declaration.
	 * A valid value is an actual value that might identify the type of an individual object and is
	 * unique in the hierarchy of the type.
	 * Inline type declarations are not supported.
	 */
	String discriminatorValue
	
	/*
     * The properties that instances of this type can or must have.
     */
    contains Property[] properties

	op ObjectType getType(String discriminator) {
		null
	}
	
    /*
     * Returns the property which matches the given name or null if no property
     * with the given name exists.
     */
    op Property getProperty(String name) {
        properties.findFirst[it.matches(name)]
    }
    
	op String discriminator() {
		getDiscriminator	
	}

	op String discriminatorValueOrDefault() {
		if (discriminatorValue === null) name else discriminatorValue
	}
}
 
interface ArrayTypeFacet extends AnyTypeFacet {
	/*
	 * Boolean value that indicates if items in the array MUST be unique.
	 */
	Boolean uniqueItems

	/*
	 * Minimum amount of items in array. Value MUST be equal to or greater than 0.
	 */
	UnsignedInteger minItems = "0"

	/*
	 * aximum amount of items in array. Value MUST be equal to or greater than 0.
	 */
	UnsignedInteger maxItems = "2147483647"
	
    /*
     * Indicates the type that all items in the array are inherited from.
     * Can be a reference to an existing type or an inline type declaration.
     */
    refers AnyType items
}

interface StringTypeFacet extends AnyTypeFacet {
	/*
	 * Regular expression that this string SHOULD match.
	 */
	RegExp pattern

	/*
	 * Minimum length of the string. Value MUST be equal to or greater than 0.
	 */
	UnsignedInteger minLength = "0"

	/*
	 * Maximum length of the string. Value MUST be equal to or greater than 0.
	 */
	UnsignedInteger maxLength = "2147483647"
}

/*
 * This enum defines the format of a number type.
 */
enum NumberFormat {
	int16,
	int8,
	int32,
	int64,

	int,
	long,

	float,
	double
}

interface CommonNumberTypeFacet extends AnyTypeFacet {
	/*
	 * The format of the value.
	 */
	NumberFormat format

	/*
	 * A numeric instance is valid against "multipleOf" if the result of dividing the instance
	 * by this keyword's value is an integer.
	 */
	PositiveInteger multipleOf		
}

interface NumberTypeFacet extends CommonNumberTypeFacet {
	/*
	 * The minimum value of the parameter. Applicable only to parameters of type number or integer.
	 */
	BigDecimal minimum
	/*
	 * The maximum value of the parameter. Applicable only to parameters of type number or integer.
	 */
	BigDecimal maximum
}

interface IntegerTypeFacet extends CommonNumberTypeFacet {
	/*
	 * The minimum value of the parameter. Applicable only to parameters of type number or integer.
	 */
	Integer minimum
	/*
	 * The maximum value of the parameter. Applicable only to parameters of type number or integer.
	 */
	Integer maximum
}

enum DateTimeFormat {
	rfc3339,
	rfc2616
}

interface DateTimeTypeFacet extends AnyTypeFacet {
		/*
	 * A timestamp in one of the following formats: if the format is omitted or set to rfc3339,
	 * uses the "date-time" notation of RFC3339; if format is set to rfc2616, uses the format
	 * defined in RFC2616.
	 */
	DateTimeFormat format	
}

interface FileTypeFacet  extends AnyTypeFacet {
	/*
     * A list of valid content-type strings for the file.
     */
    String[] fileTypes

    /*
     * Specifies the minimum number of bytes for a parameter value. The value MUST be equal to or greater than 0.
     */
    UnsignedInteger minLength = "0"

    /*
     * Specifies the maximum number of bytes for a parameter value. The value MUST be equal to or greater than 0.
     */
    UnsignedInteger maxLength = "2147483647"

    op MediaTypes getFileMediaTypes() {
        ModelHelper.getMediaTypes(fileTypes)
    }
}
 
/*
 * Every type, whether built-in or user-defined, has the any type at the root of its inheritance tree.
 * By definition, the any type is a type which imposes no restrictions, i.e. any instance of data is
 * valid against it.
 */
class AnyType extends AnyTypeFacet {
	/*
	 * The type which this type extends.
	 */
	refers AnyType ^type opposite subTypes
	
	refers AnyType[] subTypes opposite ^type

    /*
     * Examples of instances of this type.
     * This can be used, for example, by documentation generators to generate sample values for an object of this type.
     */
    contains Example[] examples

    /*
     * Returns true iff. this type is declared inline.
     */
    op boolean isInlineType() {
        eContainmentFeature == TypesPackage.Literals.INLINE_TYPE_CONTAINER__INLINE_TYPES
    }

    /*
     * If {@code inheritAnnotation} is true, this method traverses the inheritance chain to
     * find the specified annotation. Otherwise this method only tries to find the annotation
     * in this type.
     */
    op Annotation getAnnotation(AnyAnnotationType annotationType, boolean inheritAnnotation) {
        val Annotation anno = getAnnotation(annotationType)
        if (inheritAnnotation && anno === null && ^type !== null) ^type.getAnnotation(annotationType, inheritAnnotation) else anno
    }

    /*
     * If {@code inheritAnnotation} is true, this method traverses the inheritance chain to
     * find the specified annotation. Otherwise this method only tries to find the annotation
     * in this type.
     */
    op Annotation getAnnotation(String name, boolean inheritAnnotation) {
        val Annotation anno = getAnnotation(name)
        if (inheritAnnotation && anno === null && ^type !== null) ^type.getAnnotation(name, inheritAnnotation) else anno
    }
}

/*
 * A type template used by traits and resource types.
 */
class TypeTemplate extends AnyType {

}

class Example extends AnnotationsFacet, DocumentableElement, NamedElement, StrictFacet, ValueInstanceFacet {
}

interface InlineTypeContainer {
    /*
     * The inline types that this element declares.
     */
    contains AnyType[] inlineTypes
}

interface TypedElement extends NamedElement, InlineTypeContainer, AnnotationsFacet {
    /*
     * The type of this element.
     */
    refers AnyType ^type

    /*
     * Specifies if the element is required or not.
     */
    Boolean required = "true"
    
    RegExp pattern

    /*
     * @return true iff. this property pattern matches the given name
     */
    op boolean matches(String name) {
        if (pattern !== null) ModelHelper.testPattern(this, name) else this.name == name
    }
}

/*
 * This describes the properties of an element that can be documented.
 */
interface DocumentableElement extends DescriptionFacet, DisplayNameFacet {
}

class Property extends AnnotationsFacet, TypedElement {
}

class ObjectType extends AnyType, ObjectTypeFacet {
	op Boolean additionalPropertiesInherited() {
		if (additionalProperties === null && ^type instanceof ObjectType) {
			(^type as ObjectType).additionalPropertiesInherited()
		} else if (additionalProperties === null) {
			true			
		} 
		else additionalProperties
	}
	
	op String discriminator() {
		if (getDiscriminator === null && ^type instanceof ObjectType) 
			(^type as ObjectType).discriminator() 
		else 
			getDiscriminator	
	}

    /*
     * Returns all properties (with inherited) of this object type.
     *
     * If an object type specializes the type of an inherited property,
     * the specialize property will be returned by this method.
     */
    refers derived Property[] allProperties get {
        ModelHelper.getAllProperties(this)
    }
    
    op Property getProperty(String name) {
        val Property p = properties.findFirst[it.matches(name)]
        if (p === null && ^type instanceof ObjectType) (^type as ObjectType).getProperty(name) else p
    }
    
    /*
     * Returns the sub type of this type with the given discriminator value.
     * This type can be returned if it has the given discrimintaor.
     * Traverses the whole inheritance tree.
     */
    op ObjectType getType(String discriminatorValue) {
    	if (discriminatorValueOrDefault() == discriminatorValue) {
    		this
    	} else {
    		val ObjectType subType = subTypes.filter(ObjectType).findFirst[it.discriminatorValueOrDefault() == discriminatorValue]
    	
    		if (subType === null) 
    			subTypes.filter(ObjectType).findFirst[it.getType(discriminatorValue) !== null]
    		else
    			subType
    		}
    	}
}

/*
 * A JSON array.
 */
class ArrayType extends AnyType, ArrayTypeFacet {
}

/*
 * A JSON string.
 */
class StringType extends AnyType, StringTypeFacet {
}

/*
 * Any JSON number.
 */
class NumberType extends AnyType, NumberTypeFacet {
}

/*
 * A subset of JSON numbers that are positive and negative multiples of 1.
 */
class IntegerType extends AnyType, IntegerTypeFacet {
}

/*
 * A JSON boolean.
 */
class BooleanType extends AnyType {
}

/*
 * Common marker interface for all date types.
 */
interface DateTime extends AnyType {

}

/*
 * The "full-date" notation of RFC3339, namely yyyy-mm-dd.
 * Does not support time or time zone-offset notation.
 */
class DateOnlyType extends DateTime {
}

/*
 * The "partial-time" notation of RFC3339, namely hh:mm:ss[.ff...].
 * Does not support date or time zone-offset notation.
 */
class TimeOnlyType extends DateTime {
}

/*
 * Combined date-only and time-only with a separator of "T", namely yyyy-mm-ddThh:mm:ss[.ff...].
 * Does not support a time zone offset.
 */
class DateTimeOnlyType extends DateTime {
}

class DateTimeType extends DateTime, DateTimeTypeFacet {
}

/*
 * The ​file​ type can constrain the content to send through forms. When this type is used in the
 * context of web forms it SHOULD be represented as a valid file upload in JSON format.
 * File content SHOULD be a base64-encoded string.
 */
class FileType extends AnyType, FileTypeFacet {
}

class NilType extends AnyType {
}

interface OneOfFacet {
	refers AnyType[] oneOf
}

/*
 * A union type is a composition of one of its types.
 */
class UnionType extends AnyType, OneOfFacet {
}

/*
 * An intersection type is the composition of all of its types.
 */
class IntersectionType extends AnyType {
    refers AnyType[] allOf
}

/*
 * The location within an API specification where annotations can be applied MUST be one of the target locations
 * in the following Target Locations table. The targets are the locations themselves, not sub-properties within the locations.
 * For example, the Method target refers to the method node, not to the method display name, description, and so on.
 */
enum AnnotationTarget {
    /*
     * The root of a RAML document
     */
    API
    ,
    /*
     * An item in the collection of items that is the value of the root-level documentation node.
     */
    DocumentationItem
    ,
    /*
     * A resource (relative URI) node, root-level or nested
     */
    Resource
    ,
    /*
     * A method node.
     */
    Method
    ,
    /*
     * A declaration of the responses node, whose key is an HTTP status code.
     */
    Response
    ,
    /*
     * The body node of a method.
     */
    RequestBody
    ,
    /*
     * The body node of a response.
     */
    ResponseBody
    ,
    /*
     * A data type declaration (inline or in a global type collection), header declaration,
     * query parameter declaration, URI parameter declaration, or a property within any of these declarations,
     * where the type property can be used.
     */
    TypeDeclaration
    ,
    /*
     * Either an example or examples node
     */
    Example
    ,
    /*
     * A resource type node.
     */
    ResourceType
    ,
    /*
     * A trait node.
     */
    Trait
    ,
    /*
     * A security scheme declaration.
     */
    SecurityScheme
    ,
    /*
     * The settings node of a security scheme declaration
     */
    SecuritySchemeSettings
    ,
    /*
     * A declaration of the annotationTypes node, whose key is a name of an annotation type and whose value describes the annotation.
     */
    AnnotationType
    ,
    /*
     * The root of a library.
     */
    Library
    ,
    /*
     * The root of an overlay.
     */
    Overlay
    ,
    /*
     * The root of an extension.
     */
    Extension
}

/*
 * Annotation types are declared using the OPTIONAL root-level annotationTypes node.
 * The value of the annotationsType node is a map whose keys define annotation type names,
 * also referred to as annotations, and whose values are key-value pairs called annotation type declarations.
 * An annotation type declaration has the same syntax as a data type declaration,
 * and its facets have the same syntax as the corresponding ones for data types, but with the addition of the allowedTargets facet.
 * An annotation type declaration constrains the value of an annotation of that type just as a data type declaration constrains
 * the value of a URI parameter, query parameter, header, or body of that type.
 * The allowedTargets node restricts the kinds of locations where the annotation can be applied. Annotation types, like data types,
 * can extend other data types, but annotation types themselves can neither be extended nor used anywhere data types can be used.
 */
class AnyAnnotationType extends AnyTypeFacet {
	/*
	 * The type which this type extends.
	 */
	refers AnyType ^type
	
    /*
     * The locations to which annotations are restricted.
     * If this node is specified, annotations of this type may be applied only on a node corresponding to one of the locations.
     */
    AnnotationTarget[] allowedTargets
}

class TimeOnlyAnnotationType extends AnyAnnotationType {
}

class DateTimeAnnotationType extends DateTimeTypeFacet, AnyAnnotationType {
}

class DateTimeOnlyAnnotationType extends AnyAnnotationType {
}

class DateOnlyAnnotationType extends AnyAnnotationType {
}

class NumberAnnotationType extends AnyAnnotationType, NumberTypeFacet {
}

class IntegerAnnotationType extends AnyAnnotationType, IntegerTypeFacet {
}

class BooleanAnnotationType extends AnyAnnotationType {
}

class StringAnnotationType extends StringTypeFacet, AnyAnnotationType {
}

class NilAnnotationType extends AnyAnnotationType {
}

class FileAnnotationType extends FileTypeFacet, AnyAnnotationType {
}

class ObjectAnnotationType extends AnyAnnotationType, ObjectTypeFacet {
}

class ArrayAnnotationType extends AnyAnnotationType, ArrayTypeFacet {
}

class UnionAnnotationType extends AnyAnnotationType, OneOfFacet {
}


interface AnnotationsFacet {
    /*
     * The annotations of this element.
     */
    contains Annotation[] annotations

    /*
     * Returns the annotation with the given type or null if no such
     * annotation exists.
     */
    op Annotation getAnnotation(AnyAnnotationType annotationType) {
        for (Annotation anno : annotations) {
            if (anno.^type == annotationType) return anno
        }
        return null
    }

    /*
     * Returns the annotation with the given name or null if no such
     * annotation exists.
     */
    op Annotation getAnnotation(String name) {
        for (Annotation anno : annotations) {
            if (anno.^type?.name == name) return anno
        }
        return null
    }
}

class Annotation {
    /*
     * The annotation type of this annotation.
     */
    refers AnyAnnotationType ^type
    /*
     * The value of this annotation.
     */
    contains Instance value
}


class Header extends TypedElement {

}

interface HeadersFacet {
    /*
     * Detailed information about any request headers needed by this method.
     */
    contains Header[] headers

    /*
     * Returns the header with the given name or null.
     */
    op Header getHeader(String name) {
        headers.findFirst[it.name == name]
    }
}

class QueryParameter extends TypedElement {

}

interface QueryParametersFacet {
    /*
     * Detailed information about any query parameters needed by this element.
     * Mutually exclusive with queryString.
     */
    contains QueryParameter[] queryParameters

    /*
     * Returns the query parameter with the given name or null.
     */
    op QueryParameter getQueryParameter(String name) {
        queryParameters.findFirst[it.name == name]
    }
}

interface Instance extends AnnotationsFacet {
	op Object getValue()
}

class NullInstance extends Instance {
    op Object getValue() {
        null
    }
}

class StringInstance extends Instance {
	String value
}

class BooleanInstance extends Instance {
	Boolean value
}

class NumberInstance extends Instance {
	BigDecimal value
}

class IntegerInstance extends Instance {
	BigInteger value
}

class ArrayInstance extends Instance {
	contains Instance[] value
}

class ObjectInstance extends Instance {
	contains PropertyValue[] value
	
	op Instance getValue(String name) {
		value.findFirst[it.name == name]?.value
	}
}

class PropertyValue {
	String name
	contains Instance value
}

interface ProtocolsFacet {

	/*
	 * The protocols supported by this element.
	 */
	String[] protocols	
}


interface ValueInstanceFacet {
    contains Instance value

    op Object getInstanceValue() {
        return value?.getValue()
    }
}

interface DescriptionFacet {
	/*
	 * A substantial, human-friendly description of the type. Its value is a string and MAY be formatted using markdown.
	 */
    contains StringInstance ^description
}

interface DisplayNameFacet {
	/*
	 * An alternate, human-friendly name for the type.
	 */
    contains StringInstance ^displayName
}

interface StrictFacet {
    contains BooleanInstance strict
}

