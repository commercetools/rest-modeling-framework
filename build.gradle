buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    // Here we define all plugins that are used by subprojects and specify the version for external ones

    id 'idea'
    id 'eclipse'

    id 'maven-publish'
    id 'signing'

    id 'java'
    id 'java-library' // needed to make sure that transitive deps have 'compile' scope
    id 'groovy'

    id 'de.undercouch.download' version '4.0.2'
    id 'com.github.johnrengelman.shadow' version '7.1.1' apply false

    id 'org.xtext.builder' version '4.0.0' apply false
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}


import java.text.SimpleDateFormat

def globalVersion = new Version(version)

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        thisVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}

apply from: 'dependencies.gradle'

tasks.register("writeVersionToReadme") {
    doLast {
        ant.replaceregexp(match: 'rmfVersion = \"[^\\s]+\"', replace: "rmfVersion = \"${globalVersion}\"", flags:'g', byline:true) {
            fileset(dir: projectDir, includes: 'README.md')
        }
    }
}

ext {
    scmProjectName = rootProject.name
    scmRepo = 'github.com'
    scmProjectPath = "commercetools/rest-modeling-framework.git"  // github relative path with .git extension
    scmProjectUrl = "https://$scmRepo/$scmProjectPath"      // just as web-page
    scmHttpsUrl = "https://$scmRepo/$scmProjectPath"        // common VCS read access
    scmSshUrl = "git@$scmRepo:$scmProjectPath"              // developers VCS read-write repo
    SNAPSHOT_SUFFIX = "-SNAPSHOT"
    versionWIP = "development$SNAPSHOT_SUFFIX"
}

// maven-specific publishing settings
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
        connection "scm:git:$scmHttpsUrl"
        developerConnection "scm:git:$scmSshUrl"
        url "$scmProjectUrl"
    }
}

group='com.commercetools.rmf'

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv('CTP_OSS_USER')
            password = System.getenv('CTP_OSS_SECRET')
        }
    }
}

allprojects {
    description = "REST Modeling Framework. https://github.com/commercetools/rest-modeling-framework"
}

subprojects { project ->
    repositories {
        mavenCentral()
    }

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    apply plugin: 'java'
    apply plugin: 'java-library' // needed to make sure that transitive deps have 'compile' scope
    apply plugin: 'groovy'

    apply plugin: 'de.undercouch.download'

    group='com.commercetools.rmf'

    version = globalVersion

    if (project.file('src/main/antlr').exists()) {
        apply plugin: 'antlr'

        dependencies {
            antlr _antlr.antlr
        }
    }

    if (project.file('model').exists()) {
        apply plugin: 'org.xtext.builder'

        xtext {
            version = xtextVersion

            languages {
                ecore {
                    setup = 'org.eclipse.xtext.ecore.EcoreSupport'
                }
                codegen {
                    setup = 'org.eclipse.emf.codegen.ecore.xtext.GenModelSupport'
                }
                xcore {
                    setup = 'org.eclipse.emf.ecore.xcore.XcoreStandaloneSetup'
                    generator.outlet.producesJava = true
                    generator.outlet.cleanAutomatically = false
                }
            }
            sourceSets {
                main {
                    srcDir 'model'
                    output {
                        dir(xtext.languages.xcore.generator.outlet, 'src/main/java-gen')
                    }
                }
            }
        }

        dependencies {
            api 'org.eclipse.platform:org.eclipse.equinox.common:3.8.0'
            api emf.common
            api emf.ecore
            api emf.ecore_xcore_lib
            api "org.eclipse.xtext:org.eclipse.xtext.xbase.lib:$xtextVersion"

            xtextLanguages 'org.eclipse.jdt:org.eclipse.jdt.core:3.20.0'
            xtextLanguages 'org.eclipse.platform:org.eclipse.text:3.13.100'
            xtextLanguages 'org.eclipse.platform:org.eclipse.core.resources:3.20.0'
            xtextLanguages "org.eclipse.xtext:org.eclipse.xtext.ecore:$xtextVersion"
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.mwe2.runtime:2.16.0'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.codegen.ecore.xtext:1.8.0'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.common:2.35.0'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.ecore:2.35.0'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.35.0'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.ecore.xcore:1.27.0'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.ecore.xcore.lib:1.7.0'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.codegen:2.35.0'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.codegen.ecore:2.35.0'
            xtextLanguages 'org.antlr:antlr-runtime:3.2.0'
        }
    }

    javadoc {
        failOnError false
        options.tags = ["generated", "ordered", "model"]
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier = 'sources'
        dependsOn 'compileJava'
    }

    task javadocJar(type: Jar) {
        group 'build'
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives javadocJar, sourcesJar
    }


    def excludeProject= [
        'raml-test',
    ]

    if (project.file("build.gradle").exists() && !excludeProject.contains(project.name)) {

        publishing {
            repositories {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/commercetools/rest-modeling-framework")
                    credentials {
                        username = System.getenv("GITHUB_ACTOR")
                        password = System.getenv("GITHUB_TOKEN")
                    }
                }
            }
            publications {
                Maven(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                    groupId group
                    artifactId project.name
                    version version

                    pom {
                        name = project.name
                        description = project.description
                        developers {
                            developer {
                                id = "jenschude"
                                name = "Jens Schulze"
                                email = "jens.schulze@commercetools.com"
                            }
                        }
                        url = scmHttpsUrl
                    }
                    pom.withXml {
                        def root = asNode()
                        root.children().last() + pomConfig
                    }
                }
            }
        }

        signing {
            useGpgCmd()
            sign publishing.publications.Maven
        }
    }

    test {
        useJUnitPlatform()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

def exportedProjects= [
        ":antlr-utils",
        ":emf-utils",
        ":functional-utils",
        ":node-model",
        ":raml-model",
]

task alljavadoc(type: Javadoc) {
    failOnError false
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
    options.noTimestamp = true
}

configurations.all {
    if (name.contains("Tooling")) {
        dependencies {
            add(name, "org.eclipse.xtend:org.eclipse.xtend.core:$xtextVersion")
            add(name, platform("org.eclipse.xtext:xtext-dev-bom:$xtextVersion"))
        }
    }
}
